// Hello world (code from Wikipedia)
/*String inBFCode = "++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..++"
                + "+.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.";*/

// Quine by Daniel Cristofani
String inBFCode = ">+++++>+++>+++>+++++>+++>+++>+++++>++++++>+>++>+++>++++>++++>+++>+++>+++++>+>+"
                + ">++++>+++++++>+>+++++>+>+>+++++>++++++>+++>+++>++>+>+>++++>++++++>++++>++++>+++"
                + ">+++++>+++>+++>++++>++>+>+>+>+>++>++>++>+>+>++>+>+>++++++>++++++>+>+>++++++"
                + ">++++++>+>+>+>+++++>++++++>+>+++++>+++>+++>++++>++>+>+>++>+>+>++>++>+>+>++>++>+"
                + ">+>+>+>++>+>+>+>++++>++>++>+>+++++>++++++>+++>+++>+++>+++>+++>+++>++>+>+>+>+>++"
                + ">+>+>++++>+++>+++>+++>+++++>+>+++++>++++++>+>+>+>++>+++>+++>+++++++>+++>++++>+"
                + ">++>+>+++++++>++++++>+>+++++>++++++>+++>+++>++>++>++>++>++>++>+>++>++>++>++>++"
                + ">++>++>++>++>+>++++>++>++>++>++>++>++>++>+++++>++++++>++++>+++>+++++>++++++>++++"
                + ">+++>+++>++++>+>+>+>+>+++++>+++>+++++>++++++>+++>+++>+++>++>+>+>+>++++>++++"
                + "[[>>>+<<<-]<]>>>>[<<[-]<[-]+++++++[>+++++++++>++++++<<-]>-.>+>[<.<<+>>>-]>]"
                + "<<<[>>+>>>>+<<<<<<-]>++[>>>+>>>>++>>++>>+>>+[<<]>-]>>>-->>-->>+>>+++>>>>+[<<]"
                + "<[[-[>>+<<-]>>]>.[>>]<<[[<+>-]<<]<<]";


// 99 Bottles of Beer
/*String inBFCode = ">+++++++++[<+++++++++++>-]<[>[-]>[-]<<[>+>+<<-]>>[<<+>>-]>>>"
                + "[-]<<<+++++++++<[>>>+<<[>+>[-]<<-]>[<+>-]>[<<++++++++++>>>+<"
                + "-]<<-<-]+++++++++>[<->-]>>+>[<[-]<<+>>>-]>[-]+<<[>+>-<<-]<<<"
                + "[>>+>+<<<-]>>>[<<<+>>>-]>[<+>-]<<-[>[-]<[-]]>>+<[>[-]<-]<+++"
                + "+++++[<++++++<++++++>>-]>>>[>+>+<<-]>>[<<+>>-]<[<<<<<.>>>>>-"
                + "]<<<<<<.>>[-]>[-]++++[<++++++++>-]<.>++++[<++++++++>-]<++.>+"
                + "++++[<+++++++++>-]<.><+++++..--------.-------.>>[>>+>+<<<-]>"
                + ">>[<<<+>>>-]<[<<<<++++++++++++++.>>>>-]<<<<[-]>++++[<+++++++"
                + "+>-]<.>+++++++++[<+++++++++>-]<--.---------.>+++++++[<------"
                + "---->-]<.>++++++[<+++++++++++>-]<.+++..+++++++++++++.>++++++"
                + "++[<---------->-]<--.>+++++++++[<+++++++++>-]<--.-.>++++++++"
                + "[<---------->-]<++.>++++++++[<++++++++++>-]<++++.-----------"
                + "-.---.>+++++++[<---------->-]<+.>++++++++[<+++++++++++>-]<-."
                + ">++[<----------->-]<.+++++++++++..>+++++++++[<---------->-]<"
                + "-----.---.>>>[>+>+<<-]>>[<<+>>-]<[<<<<<.>>>>>-]<<<<<<.>>>+++"
                + "+[<++++++>-]<--.>++++[<++++++++>-]<++.>+++++[<+++++++++>-]<."
                + "><+++++..--------.-------.>>[>>+>+<<<-]>>>[<<<+>>>-]<[<<<<++"
                + "++++++++++++.>>>>-]<<<<[-]>++++[<++++++++>-]<.>+++++++++[<++"
                + "+++++++>-]<--.---------.>+++++++[<---------->-]<.>++++++[<++"
                + "+++++++++>-]<.+++..+++++++++++++.>++++++++++[<---------->-]<"
                + "-.---.>+++++++[<++++++++++>-]<++++.+++++++++++++.++++++++++."
                + "------.>+++++++[<---------->-]<+.>++++++++[<++++++++++>-]<-."
                + "-.---------.>+++++++[<---------->-]<+.>+++++++[<++++++++++>-"
                + "]<--.+++++++++++.++++++++.---------.>++++++++[<---------->-]"
                + "<++.>+++++[<+++++++++++++>-]<.+++++++++++++.----------.>++++"
                + "+++[<---------->-]<++.>++++++++[<++++++++++>-]<.>+++[<----->"
                + "-]<.>+++[<++++++>-]<..>+++++++++[<--------->-]<--.>+++++++[<"
                + "++++++++++>-]<+++.+++++++++++.>++++++++[<----------->-]<++++"
                + ".>+++++[<+++++++++++++>-]<.>+++[<++++++>-]<-.---.++++++.----"
                + "---.----------.>++++++++[<----------->-]<+.---.[-]<<<->[-]>["
                + "-]<<[>+>+<<-]>>[<<+>>-]>>>[-]<<<+++++++++<[>>>+<<[>+>[-]<<-]"
                + ">[<+>-]>[<<++++++++++>>>+<-]<<-<-]+++++++++>[<->-]>>+>[<[-]<"
                + "<+>>>-]>[-]+<<[>+>-<<-]<<<[>>+>+<<<-]>>>[<<<+>>>-]<>>[<+>-]<"
                + "<-[>[-]<[-]]>>+<[>[-]<-]<++++++++[<++++++<++++++>>-]>>>[>+>+"
                + "<<-]>>[<<+>>-]<[<<<<<.>>>>>-]<<<<<<.>>[-]>[-]++++[<++++++++>"
                + "-]<.>++++[<++++++++>-]<++.>+++++[<+++++++++>-]<.><+++++..---"
                + "-----.-------.>>[>>+>+<<<-]>>>[<<<+>>>-]<[<<<<++++++++++++++"
                + ".>>>>-]<<<<[-]>++++[<++++++++>-]<.>+++++++++[<+++++++++>-]<-"
                + "-.---------.>+++++++[<---------->-]<.>++++++[<+++++++++++>-]"
                + "<.+++..+++++++++++++.>++++++++[<---------->-]<--.>+++++++++["
                + "<+++++++++>-]<--.-.>++++++++[<---------->-]<++.>++++++++[<++"
                + "++++++++>-]<++++.------------.---.>+++++++[<---------->-]<+."
                + ">++++++++[<+++++++++++>-]<-.>++[<----------->-]<.+++++++++++"
                + "..>+++++++++[<---------->-]<-----.---.+++.---.[-]<<<]";*/

// ROT13
/*String inBFCode = "-,+[-[>>++++[>++++++++<-]<+<-[>+>+>-[>>>]<[[>+<-]>>+>]<<<<<-"
                + "]]>>>[-]+>--[-[<->+++[-]]]<[++++++++++++<[>-[>+>>]>[+[<+>-]>"
                + "+>>]<<<<<-]>>[<+>-]>[-[-<<[-]>>]<<[<<->>-]>>]<<[<<+>>-]]<[-]"
                + "<.[-]<-,+]";*/

char[] BFCode;
int codeLength;
String input = "";
char[] tape;
int tapeSize = 1;
int tapePointer = 0;
int tapePointerOrigin = 0;
int codePointer = 0;
int inPointer = 0;
int lineOffset = 0;
String output;
int drawLeftBound = 0;
int drawRightBound = 1;

void setup() {
  size(800, 600);
  tape = new char[1];
  tape[tapePointer] = 0;
  output = new String("");
  codeLength = inBFCode.length();
  BFCode = inBFCode.toCharArray();
}

void doInterpreter() throws Exception {
  switch (BFCode[codePointer]) {
    case '>': 
      if (tapeSize == ++tapePointer) {
        char[] newTape = new char[++tapeSize];
        for (int i=0; i<tapeSize-1; i++) {
          newTape[i] = tape[i];
        }
        tape = newTape;
      }
      if (tapePointer - tapePointerOrigin > 20) {
        tapePointerOrigin++;
      }
      // Recalculate draw bounds
      drawLeftBound = max(tapePointerOrigin-65, 0);
      drawRightBound = min(tapePointerOrigin+65, tapeSize);
      break;
    case '<': 
      if (tapePointer == 0) {
        char[] newTape = new char[++tapeSize];
        newTape[tapePointer] = 0;
        for (int i=0; i<tapeSize-1; i++) {
          newTape[i+1] = tape[i];
        }
        tape = newTape;
      } else {
        tapePointer--;
      }
      if (tapePointer - tapePointerOrigin < -20) {
        tapePointerOrigin--;
      }
      // Recalculate draw bounds
      drawLeftBound = max(tapePointerOrigin-65, 0);
      drawRightBound = min(tapePointerOrigin+65, tapeSize);
      break;
    case '+':
      tape[tapePointer]++;
      break;
    case '-': 
      tape[tapePointer]--;
      break;
    case ',':
      if (inPointer < input.length()) {
        tape[tapePointer] = input.charAt(inPointer);
        inPointer++;
      } else {
        codePointer--; // Wait for input
      }
      break;
    case '.': 
      if (tape[tapePointer] == '\n') {
        println(output);
        output = "";
      }
      output += tape[tapePointer];
      break;
    case '[': 
      if (tape[tapePointer] == 0) {
        int d = 1;
        while (BFCode[codePointer] != ']' || d != 0) {
          codePointer++;
          if (codePointer == codeLength) throw new Exception("Code out of bounds");
          if (BFCode[codePointer] == '[') {
            d++;
          } else if (BFCode[codePointer] == ']') {
            d--;
            if (d < 0) throw new Exception("Bracket-matching failure");
          }
        }
      }
      break;
    case ']':
      if (tape[tapePointer] != 0) {
        int d = 1;
        while (BFCode[codePointer] != '[' || d != 0) {
          codePointer--;
          if (codePointer < 0) throw new Exception("Code out of bounds");
          if (BFCode[codePointer] == ']') {
            d++;
          } else if (BFCode[codePointer] == '[') {
            d--;
            if (d < 0) throw new Exception("Bracket-matching failure");
          }
        }
      }
      break;
  }
}

void keyPressed() {
  input += key;
}

void drawTextOut() {
  fill(55,255,55);
  text(output, 25, 25, 750, 275);
}

void drawTapeVis() {
  
  // Draw the pointer head
  pushMatrix();
  translate((tapePointer - tapePointerOrigin)*6, 0);
  fill(55,55,255);
  triangle(400, 329, 397, 324, 403, 324);
  popMatrix();
  
  translate(342 - ((tapePointerOrigin-1)*6), 0);
  
  // Draw the stacks
  for (int i=drawLeftBound; i<drawRightBound; i++) {
    for (int j=0; j<tape[i]; j++) {
      fill(255,i,j);
      rect(i*6 + 50, j*2 + 330, 5, 2);
    }
  }
}

void draw() {
  background(0);
  try {
    doInterpreter();
    codePointer++;
    if (codePointer == codeLength) {
      println(output);
      println("Execution finished.");
      noLoop(); // Stops executing draw()
    }
  }
  catch (Exception e) {
    print(e);
    exit();
  }
  drawTextOut();
  drawTapeVis();
}
